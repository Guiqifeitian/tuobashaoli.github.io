---
title: "一些算法"
date: '2019-05-05 18:27:18'
published: False
categorie: blog
layout: post
---

# 动态规划算法

## 核心

记住已经求过的解

## 两种形式

### 自顶向下的备忘录法

对于斐波那契数列，通常的做法是如下

```python
def fib(n):
  if n == 0:
    return 0
  return 1 if n ==1 else fib(n -1) + fib(n - 2)
```

这就造成了一个问题，在执行`fib(7)`的时候，实际上也执行了`fib(6)...`等，再到执行`fib(8)`的时候，又要讲之前重新执行过的`fib(7)...`都再执行一遍，造成了浪费。根据**记住已经求过的解**，解法可如下

```python
def Fib(n):
  if n <= 0:
    return n
  mem = []
  for i in range(n+1):
    mem.append(-1)
  return fib(n,mem)

def mem(n,mem):
  if mem[n] != -1:
    return mem[n]
  if n <= 2:
    mem[n] = 1
  else:
    mem[n] = fib(n -1,mem) + fib(n -2,mem)

  return mem[n]
```

这样，在计算过Fib(n)后，之前的所有斐波那契数都被记录下来，不用在递归计算，直接查询就可以获得了，节省了时间。也就是说，**自顶向下就是先计算后面的值，过程中保留前面的值，然后在需要前面的值的时候直接查询**

### 自底向上

自顶向下还是使用了递归，如果不使用递归，那就是先计算出1,2，再计算出3

```python
def fib(n):
  if n <= 1:
    return n

  mem_i_2,mem_i_1 = 0,1
  for i in range(2,n+1):
    mem_i = mem_i_2 + mem_i_1
    mem_i_2 = mem_i_1
    mem_i_1 = mem_i

  return mem_i
```

**自底向上就是先计算前面的值，然后再用这些值计算后面的值**

### 钢条切割问题

递归解法

```python
def cut(p,n):
  # p是长度和价格的对应的字典
  if n ==0:
    return 0
  q = -1
  for i in range(1,n+1):
    q = max(q,p[i]+cut(p,n-i))
  return q
```

自顶向下

```python
def Cut(p,n):
  if n == 0:
    return 0
  mem = {}
  for i in range(n+1):
    mem[i] = -1
  return cut(p,n,mem)
  

def cut(p,n,mem):
  q = -1
  if mem[n] != -1:
    return mem[n]
  else:
    for i in range(1.n +1):
      q = max(q,p[i]+cut(p,n-i,mem))
  mem[n]=q
  return q
```

自底向上

```python
def cut(p,n):
  mem = {}
  for i in range(1,n+1):
    q = -1
    for j in range(1,i+1):
      q = max(q,p[j]+mem[i-j])
    mem[i] = q

  return q
```

### 原理

#### 最优子结构

如果一个问题的解的结构包含其子问题的最优解，称此问题具有最优子结构

#### 重叠子问题

如果递归算法反复求解相同的子问题，称具有重叠子问题

#### 经典模型

##### 线性模型

过河问题

假设i个人过河的最少时间为opt[i],当还剩一个人未过河，opt[i] = opt[i-1] + a[1] + a[i]，当还剩俩个人未过河，opt[i] = opt[i-2] + a[1] + a[i] + 2\*a[2]，所以

`opt[i] = min{opt[i] + a[1] + a[i],opt[i -2] + a[1] + 2 * a[2]}`

##### 区间模型

给定一个长度为n，n <= 1000 的字符串A，求插入多少个字符让它成为一个回文字符串

回文是明显的子结构特征，当X是回文的时候，那么‘aXa’必然也是回文，`d[i][j]`表示`A[i][j]`这个子串成为会需要的字符数，那么当`A[i] == A[j]`，`d[i][j] == d[i+1][j-1]`，当`A[i] != A[j]`的时候，

1. 在`A[j]`的后面添加一个字符`A[i]`
2. 在`A[i]`的前面添加一个字符`A[j]`

`d[i][j] = min{d[i+1][j],d[i][i-1] } + 1`

##### 背包模型

背包问题

`f[i][v]`表示前i种物品签好放入一个容量为v的背包可以获得的最大价值，决策为第i个物品在前i-1个物品放置完毕后，选择放还是不放

`f[i][v] = max{f[i-1][v],f[i-1][v - Ci] + Wi}`

分组背包

```
n,m=map(int,input().split())
f=[0]*n #购物单总价值
#分组背包，每组有四种情况，a.主件 b.主件+附件1 c.主件+附件2 d.主件+附件1+附件2
v=[[0 for i in range(4)] for j in range(m+1)] #每组的资金
w=[[0 for i in range(4)] for j in range(m+1)] #每组的重要度

n=n//10#价格为10的整数倍，节省时间
for i in range(1,m+1):
    x,y,z=map(int,input().split())
    x=x//10
    if z==0:
        # 主件，同时给每个组合初始化主件的金额跟重要度
        for t in range(4):
            v[i][t], w[i][t] = v[i][t]+x, w[i][t]+x* y
    elif v[z][1]==v[z][0]:#附件且a==b，意味着附件1没加入，这时候累加b跟d情况
        v[z][1],w[z][1] = v[z][1] + x, w[z][1] + x* y
        v[z][3],w[z][3] = v[z][3] + x, w[z][3] + x* y
    else:#附件且a!=b，意味着附件1加入了附件2没加入，这时候累加c跟d情况
        v[z][2], w[z][2] = v[z][2] + x, w[z][2] + x* y
        v[z][3], w[z][3] = v[z][3] + x, w[z][3] + x* y
# m:加入购物单的物品个数上限
for i in range(1, m+1):
    # n:购物总资金上限，只能倒序遍历，因为背包的思维是可用空间从大到小，求当前每个子状态的最优，
    # 如果顺序遍历，背包容量变大，之前遍历的子状态的最优结论就被推翻了
    for j in range(n, -1, -1):
        for k in range(4):
            if j >= v[i][k]:
                # 将每组的购物资金 整体视为 一个容量，这样才不会出现主件重复放入的情况，这也是其他答案犯错的地方
                # f[j]：表示总花费为j钱时的最大购物价值
                f[j] = max(f[j], f[j-v[i][k]]+w[i][k])
print(10*f[n])
```

# 深度优先搜索

DFS，遍历的非递归一般使用栈，不保留节点，占用空间少，有回溯操作，运行速度慢

# 回溯算法

类似深度优先搜索尝试的过程，在发现不满足求解条件的时候，就返回，尝试别的路径。

# 广度优先搜索

BFS，遍历的非递归一般使用队列，保留节点，占用空间大，无回溯操作，运行速度快

# 优先级队列和堆排序

和通常的栈和队列一样，只不过每个元素都有一个优先级，先处理优先级最高的，再处理优先级次高的，如果优先级相同，则先处理先插入队列的元素

## 二叉堆

一个近似完全二叉树的结构，满足堆的性质：子节点的键值或索引总是小于或者大于父节点，那么，根节点就是二叉堆上最大或者最小值。

二叉堆中：

+ 元素k父节点位置是\[k/2\]
+ 元素k子节点的位置是2k和2k+1

从而实现插入和删除最大值都是O(n\* log n)的时间复杂度

## 堆排序
